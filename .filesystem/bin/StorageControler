#!/usr/bin/env bash
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   $Id: StorageControler 789 2008-03-24 13:02:06Z wael $
#
#   Copyright (c) 2007 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

####
# Notes

# Don't use the following variables in your script, they are reserved
#   to the Functions uses
# 'LOCK': This is a variable used by the functions 'lock_script' and
#   'free_lock'
# 'TempFiles': This is a variable containing a list of Files to remove
#   when the script exits.
# Make sure you always use $ARGS instead of $1, Note that $ARGS[0]
#   correspond to $1, and $ARGS[1] correspong to $2 ...

#
####

####
# Options

# Change this option to true to enable options parsing
ParseOptions=false

#
####

# Bootstrap{{{
bootstrap="`dirname $0`/.bootstrap"
if [ -f "${bootstrap}" ]; then
    source "${bootstrap}"
else
    echo "Cannot bootstrap"
    exit 54
fi
unset bootstrap
#}}}

####
# Functions

# If you want to define a specific help for this script
function help()
{
    print_info 0 "Help;"
    print_info 2 "This script makes mount/umounting external hard disks much easier"
    print_info 2 "it takes care of making sure that nothing is currently using the hard"
    print_info 2 "before umounting it, it also makes sure that everything is set up, properly"
    print_info 2 "before mounting it."
    print_info 2 "USAGE: ${0} <action> [DRIVE] [DRIVE]..."
    QuitScript
}

#
####

####
# Main

if [ "${#}" -lt "1" ] || [ "${1}" != "mount" -a "${1}" != "umount" ]; then
    print_error 0 "Usage: ${0} <action> [DISC]."
    print_error 2 "where action is either mount or umount"
    exit 1
fi

need_root ${@}

case "${1}" in
    "mount")
        print_info 0 "Mounting external Hard Disks."
        for i in /media/whd* /media/wusb* /media/wmmc*; do
            i="$( basename "${i}" )"
            if ! grep -q " /media/${i} " /etc/fstab; then
                print_error 2 "'/media/${i}' is not in fstab, Skipping..."
                continue
            elif grep -q " /media/${i} " /proc/mounts; then
                print_warning 2 "'/media/${i}' is already mounted, Skipping..."
                continue
            elif [ ! -e "$( grep "/media/${i}" /etc/fstab | cut -d' ' -f1 )" ]; then
                print_error 2 "'$( grep "/media/${i}" /etc/fstab | cut -d' ' -f1 )' does not exist (is it on and connected?), Skipping..."
                continue
            fi
            print_info 2 "Mounting '/media/${i}'."
            mount "/media/${i}" || die "Failed to mount '/media/${i}'."
        done
        print_info 0 "The hard disks are ready for usage."
        ;;
    "umount")
        print_info 0 "Unmounting external Hard Disks."
        print_info 2 "Calling sync."
        sync
        for i in /media/whd* /media/wusb* /media/wmmc*; do
            i="$( basename "${i}" )"
            if lsof -n "/media/${i}" &> /dev/null; then
                print_error 2 "The Hdd '/media/${i}' is currently in use, Cannot unmount it."
                print_error 3 "Check 'lsof -n | grep /media/${i}' for more information."
                continue
            elif ! grep -q " /media/${i} " /etc/fstab; then
                print_error 2 "'/media/${i}' is not in fstab, Skipping."
                continue
            elif grep -q " /media/${i} " /proc/mounts; then
                print_info 2 "Umounting '/media/${i}'."
                umount -l "/media/${i}" || die "Failed to umount '/media/${i}'."
            else
                print_warning 2 "'/media/${i}' is not mounted, Skipping..."
                continue
            fi
        done
        print_info 0 "You can turn off the power now."
        ;;
    *)
        print_error 0 "Action ${1} is not valid."
        exit 1
        ;;
esac

#
####
