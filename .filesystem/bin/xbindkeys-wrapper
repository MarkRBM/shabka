#!/usr/bin/env bash
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   $Id: xbindkeys-wrapper 785 2008-03-24 12:42:13Z wael $
#
#   This is a a little script to perform special tasks, It is
#   very usefull for xbindkeys.
#   Copyright (C) 2006, Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

usage()
{
    echo "Usage: $0 <Task> [ARGUMENTS]"
    echo "  Volume      Control the volume."
    echo "  Browser     Open the default browser."
    echo "  Sleep       Suspend  to  RAM."
    echo "  Hibernate   Suspend  to  Disk."
}


##
 # This funtion will, for a given device, print
 # VLeft Sleft VRight SRight
 # Where V stands for Volume
 # and S stands for State
 # you might want to collect the result in an array.
 ##
get_mixer_info ()
{
    if [ $# -ne 1 ]; then
        echo "N/A"
        echo "N/A"
        echo "N/A"
        echo "N/A"
        return 1
    fi

    local data vleft sleft
    local vright sright
    data="$(amixer get "${1}")"
    vleft="$(echo ${data} | grep "Front Left:" | sed -e 's@.*\[\(.*\)\].*\[.*\]@\1@g')"
    sleft="$(echo ${data} | grep "Front Left:" | sed -e 's@.*\[\(.*\)\]$@\1@g')"

    vright="$(echo ${data} | grep "Front Right:" | sed -e 's@.*\[\(.*\)\].*\[.*\]@\1@g')"
    sright="$(echo ${data} | grep "Front Right:" | sed -e 's@.*\[\(.*\)\]$@\1@g')"

    echo "${vleft}"
    echo "${sleft}"
    echo "${vright}"
    echo "${sright}"
    return 0
}

##
 # This function will control the sound volume
 # it can raise, lower or mute/unmute any channel
 # it takes 3 aguments
 # @param Channel, which is the channel to perform the
 #      action on.
 # @param Action, it can be raise, lower or switch
 # @param The 3rd argument is required only if 2nd is raise/lower
 #      it's the % to raise/lower the volume.
 ##
volume()
{
    if [ $# -lt 2 ]; then
        echo -e "${FG_RED_B}Usage: $0 Volume <CHANNEL> <ACTION>${FG_CLEAR}"
        exit 1
    fi

    if [ \( "${2}" = "raise" -o "${2}" = "lower" \) -a -z "${3}" ]; then
        echo -e "${FG_RED_B}Usage: $0 Volume <CHANNEL> <ACTION> <PERCENTAGE>${FG_CLEAR}"
        exit 1
    fi

    if [ \( "${2}" = "raise" -o "${2}" = "lower" \) -a ! -z "${3}" ]; then
        [ "${2}" = "raise" ] && \
            sign="+"
        [ "${2}" = "lower" ] && \
            sign="-"

        amixer set "${1}" "${3}${sign}" &> /dev/null
    fi

    if [ "${2}" = "mute" -o "${2}" = "unmute" -o "${2}" = "switch" ]; then
        data=($(get_mixer_info "${1}"))

        [ \( "${2}" = "mute" -o "${2}" = "switch" \) -a \( "${data[1]}" = "on" -o "${data[3]}" = "on" \) ] && \
            amixer set "${1}" mute &>/dev/null

        [ \( "${2}" = "unmute" -o "${2}" = "switch" \) -a \( "${data[1]}" = "off" -o "${data[3]}" = "off" \) ] && \
            amixer set "${1}" unmute &>/dev/null
    fi
}

###
 # a simple function to open a browser
 ##
open_browser()
{
    local default_browser="opera"
    if [ ! -z "${BROWSER}" ]; then
        ${BROWSER} &
    else
        ${default_browser} &
    fi
}

###
 # Sleep function
 # Require powersave daemon
 ##
Sleep()
{
    powersave -u
}

###
 # Hibernate function
 # Require powersave daemon
 ##
Hibernate()
{
    powersave -U
}

# Tasks...

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

case "${1}" in
    Volume)
        shift
        volume "${@}"
        exit 0
        ;;
    Browser)
        open_browser
        exit 0
        ;;
    Sleep)
        Sleep
        exit 0
        ;;
    Hibernate)
        Hibernate
        exit 0
        ;;
    *)usage; exit 1 ;;
esac
