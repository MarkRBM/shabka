#!/usr/bin/env bash
#
#  vim:ft=sh:fenc=UTF-8:ts=2:sts=2:sw=2:expandtab:foldmethod=marker:foldlevel=0:
#
#  Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#  This file is part of Bckup.
#
#  Bckup is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bckup is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bckup.  If not, see <http://www.gnu.org/licenses/>.
#

# Some functions are taken from
#     http://phraktured.net/config/
#     http://www.downgra.de/dotfiles/

# Defining some color
export FG_CLEAR="\033[0m"

# Regular ForeGround colors
export FG_BLACK="\033[0;30m"
export FG_RED="\033[0;31m"
export FG_GREEN="\033[0;32m"
export FG_YELLOW="\033[0;33m"
export FG_BLUE="\033[0;34m"
export FG_MAGNETA="\033[0;35m"
export FG_CYAN="\033[0;36m"
export FG_WHITE="\033[0;37m"

# Bold ForeGround colors
export FG_BLACK_B="\033[1;30m"
export FG_RED_B="\033[1;31m"
export FG_GREEN_B="\033[1;32m"
export FG_YELLOW_B="\033[1;33m"
export FG_BLUE_B="\033[1;34m"
export FG_MAGNETA_B="\033[1;35m"
export FG_CYAN_B="\033[1;36m"
export FG_WHITE_B="\033[1;37m"

# Background colors
export BG_BLACK="\033[40m"
export BG_RED="\033[41m"
export BG_GREEN="\033[42m"
export BG_YELLOW="\033[43m"
export BG_BLUE="\033[44m"
export BG_MAGNETA="\033[45m"
export BG_CYAN="\033[46m"
export BG_WHITE="\033[47m"

# GOOD, WARN and ERROR colors
export GOOD="${FG_GREEN_B}"
export WARN="${FG_YELLOW_B}"
export ERROR="${FG_RED_B}"

# isTrue()#{{{
function isTrue() {
  case "${1}" in
    [Tt][Rr][Uu][Ee])
      return 0
    ;;
    [Tt])
      return 0
    ;;
    [Yy][Ee][Ss])
      return 0
    ;;
    [Yy])
      return 0
    ;;
    1)
      return 0
    ;;
  esac
  return 1
}
#}}}
# isFalse()#{{{
function isFalse() {
  case "${1}" in
    [Ff][Aa][Ll][Ss][Ee])
      return 0
    ;;
    [Ff])
      return 0
    ;;
    [Nn][Oo])
      return 0
    ;;
    [Nn])
      return 0
    ;;
    0)
      return 0
    ;;
  esac
  return 1
}
#}}}
# isNumber()#{{{
function isNumber() {
  [ "${#}" -lt "1" ] && return 1

  case "${1}" in
    [0-9]*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}
#}}}
# inArray()#{{{
function inArray()
{
  local i
  [[ "${#}" -lt "2" ]] && return 1
  needle="${1}"
  shift
  haystack=(${@})
  for i in ${haystack[@]}; do
    [[ "${needle}" = "${i}" ]] && return 0
  done
  return 1
}
#}}}
# print_info()#{{{
# print_info(printlevel, print [, newline [, prefixline ] ])
function print_info() {
  local NEWLINE='1'
  local PREFIXLINE='1'
  local STR=''
  local PREFIXTEXT=''

  # NOT ENOUGH ARGS
  if [ "${#}" -lt '2' ] ; then return 1; fi

  # WRONG printlevel
  if [ "${1}" -lt "0" ]; then
    print_error 1 "printlevel must be above or equal 0"
    return 1
  fi

  # If printlevel is 0, the text must be bolded
  if [ "${1}" -eq "0" ]; then
    PREFIXTEXT="${FG_WHITE_B}"
  fi

  # IF 3 OR MORE ARGS, CHECK IF WE WANT A NEWLINE AFTER PRINT
  if [ "${#}" -gt '2' ]
  then
    if isTrue "${3}"
    then
      NEWLINE='1';
    else
      NEWLINE='0';
    fi
  fi

  # IF 4 OR MORE ARGS, CHECK IF WE WANT TO PREFIX WITH A *
  if [ "${#}" -gt '3' ]
  then
    if isTrue "${4}"
    then
      PREFIXLINE='1'
    else
      PREFIXLINE='0'
    fi
  fi

  # STRUCTURE printlevel
  if [ "${1}" -gt "1" ]; then
    PRINTLEVEL="$(for i in $(fseq 1 ${1}); do echo -ne "  "; done)"
  else
    PRINTLEVEL=" "
  fi

  # STRUCTURE DATA TO BE OUTPUT TO SCREEN, AND OUTPUT IT
  if [ "${PREFIXLINE}" = '1' ]
  then
    STR="${GOOD}*${FG_CLEAR}${PRINTLEVEL}${PREFIXTEXT}${2}${FG_CLEAR}"
  else
    STR="${PREFIXTEXT}${2}${FG_CLEAR}"
  fi

  if [ "${NEWLINE}" = '0' ]
  then
    echo -ne "${STR}"
  else
    echo -e "${STR}"
  fi

  return 0
}
#}}}
# print_error()#{{{
function print_error()
{
  GOOD=${ERROR} print_info "${@}" >&2
}
#}}}
# print_warning()#{{{
function print_warning()
{
  GOOD=${WARN} print_info "${@}"
}
#}}}
# print_menu()#{{{
function print_menu()
{
  local num="${1}"
  shift
  local name="${@}"
  print_info 0 "${FG_YELLOW}${num}.\t${FG_BLUE}${name}${FG_CLEAR}" true false
}
#}}}
# print_coloumn()#{{{
function print_coloumn()
{
  [ "${#}" -lt "2" ] && return 1
  local coloumn="${1}"
  shift
  local text="${@}"
  print_info 1 "\033[$((${coloumn}))G${text}" false false
}
#}}}
# check_root()#{{{
function check_root()
{
  if [ "$(id -u)" != "0" ]; then
    return 1
  else
    return 0
  fi
}
#}}}
# need_root()#{{{
function need_root()
{
  if ! check_root; then
    print_warning 0 "Re-Running the script under root."
    if [ -x "$(/usr/bin/which sudo 2> /dev/null)" ]; then
      if yes 'NOPASS' | sudo -S -l 2> /dev/null | grep -q "NOPASSWD"; then
        sudo "${0}" ${@}
      else
        # We need the user to put a password.
        print_info 1 "You must enter the password for '${USER}' to open a root session."
        sudo "${0}" ${@}
      fi
    else
      # There is no sudo command, we have to use 'su'.
      print_info 1 "You must enter the password for 'root' to open a root session."

      # Try to preserve the environment, if possible, on linux
      # it is possible, but on FreeBSD-like system it is not, unless
      # the caller has uid 0 (a.k.a root) which isn't the case.
      #
      # Enable it by default it on Linux, and disable it in case
      # it's a FreeBSD and for everything else...
      if [ "$( uname )" = "Linux" ]; then
        PreserveEnvironment="-p"
      elif [ "$( uname )" = "FreeBSD" ]; then
        PreserveEnvironment=""
      else
        PreserveEnvironment=""
      fi

      # the actual su command
      su -l root ${PreserveEnvironment} -c "export HOME=${HOME}; ${0} ${@}"
    fi
    exit "${?}"
  else
    return 0
  fi
}
#}}}
# needNet()#{{{
function needNet()
{
  # is it a sticky application ?{{{
  if [ "${1}" = "-k" ]; then
    KEEP=true
    shift
  else
    KEEP=false
  fi
  #}}}
  # Sanity checks{{{
  if [ "${#}" -lt 1 ]; then
    print_error 0 "Usage: needNet <command> [args...]"
    return 1
  fi
  #}}}
  # Global Variables{{{
  COMMAND="${1}"
  shift
  ARGS=${@}
  #}}}
  # Launch the application.#{{{
  # This loop will wait untill a connection is available
  # and then launch the program.
  (
    while true; do
      if ping -c 1 google.com &> /dev/null; then
        "${COMMAND}" ${ARGS}
        if isTrue ${KEEP}; then
          continue
        else
          break
        fi
      else #* We couldn't connect, print a warning and sleep for 5 mins... *#
        print_warning 0 "I couldn't ping google.com, retrying to launch ${COMMAND} in 30 seconds..."
        sleep 30
      fi
    done
  ) &
  #}}}

  unset COMMAND
  unset ARGS
  unset KEEP

}
#}}}
# not_root()#{{{
function not_root()
{
  if check_root; then
    print_error 0 "For security reasons, you should not run this script as root!"
    exit 1
  fi
}
#}}}

# interrupt()#{{{
##
# The function interrupt will be used if the user pressed Ctrl+C
# You can easly do custom stuff by redefining this function
##
function interrupt()
{
  free_lock
  exit 130
}
#}}}
# die()#{{{
function die()
{
  local remove_lock=true
  if [ "${1}" = "-k" ]; then
    remove_lock=false
    shift
  fi
  print_error 0 "${@}"
  if isTrue "${remove_lock}"; then
    free_lock
  fi
  exit 1
}
#}}}
# lock_file()#{{{
function lock_file()
{
  [[ -z "${LOCK}" ]] && return 1
  if [ -f "${LOCK}" ]; then
    die -k "The lock file '${LOCK}' exists, please delete it if you wish to run the script."
  else
    touch "${LOCK}" || die "Couldn't create the lock file."
  fi
}
#}}}
# free_lock()#{{{
function free_lock()
{
  [[ -z "${LOCK}" ]] && return 1
  rm -f -- "${LOCK}"
}
#}}}
# help()#{{{
function help()
{
  print_info 0 "This script does not have a 'help' function."
  QuitScript
}
#}}}
# QuitScript()#{{{
function QuitScript()
{
  if [ -n "${1}" ] && isNumber "${1}"; then
    free_lock
    exit "${1}"
  fi

  # Exit code not given, ok let's try checking QuitScriptCode
  if [ -n "${QuitScriptCode}" ] && isNumber "${QuitScriptCode}"; then
    free_lock
    exit "${QuitScriptCode}"
  fi

  # Ok just quit
  free_lock
  exit 0
}
#}}}
# Arguments#{{{
ARGS=( ${@} )
#}}}

# End Of File
# vim: set ft=sh ts=4 sts=4 sw=4 expandtab:
