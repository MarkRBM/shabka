#!/usr/bin/env bash
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

####
# Notes

# Don't use the following variables in your script, they are reserved
#   to the Functions uses
# 'LOCK': This is a variable used by the functions 'lock_script' and
#   'free_lock'
# 'TempFiles': This is a variable containing a list of Files to remove
#   when the script exits.
# Make sure you always use $ARGS instead of $1, Note that $ARGS[0]
#   correspond to $1, and $ARGS[1] correspong to $2 ...

#
####

####
# Options

# Change this option to true to enable options parsing
ParseOptions=false

#
####

# Bootstrap{{{
bootstrap="`dirname $0`/.bootstrap"
if [ -f "${bootstrap}" ]; then
    source "${bootstrap}"
else
    echo "Cannot bootstrap"
    exit 54
fi
unset bootstrap
#}}}

####
# Functions

# If you want to define a specific help for this script
#function help()
#{
#    # print_info goes here
#}

usage () {
    echo "
Usage: `basename "$0"` [-q] [-1|-2] [-L|-H] [-b BITRATE ] [-m MAX_BITRATE] [-w WIDTH] [-h HEIGHT] MOVIE_FILE
-q              Quieter output.
-1              Use 1 pass encoding.
-2              Use 2 passes (default).
-L              Use lavc (default). Much quicker, but not as high quality.
-H              Use h264.  Slow, but high quality.
-o FOLDER       Defaults to ./ipod/
-b BITRATE      Defaults to 448, 192 for low quality, 768 for high
-m MAX_BITRATE  Defaults to 960, 768 for low quality, 1500 for high
-w WIDTH        Defaults to 320, ipod screen width.  Use 640 for tv out.
-h HEIGHT       Defaults to 240, ipod screen height.  Use 480 for tv out.
"
}


#
####

####
# Main

quiet=""
passes="2"
codec="lavc"
bitrate="448"
bitratemax="960"
width="320"
height="240"
outfolder="ipod"

[ "$#" -lt 1 ] && usage && exit -1

while getopts "q12LHo:b:m:w:h:" Option; do
    case "$Option" in
        q) quiet="-quiet" ;;
        1) passes="1" ;;
        2) passes="2" ;;
        o) outfolder="$OPTARG" ;;
        b) bitrate="$OPTARG" ;;
        m) bitratemax="$OPTARG" ;;
        w) width="$OPTARG" ;;
        h) height="$OPTARG" ;;
        L) codec="lavc" ;;
        H) codec="h264" ;;
        *) usage; exit -1 ;;
    esac
done
shift $(( $OPTIND - 1 ))

while [ "$1" ]; do
    infile="$1"
    ! [ -f "$infile" ] && echo Error, file not found \"$infile\"  && usage && exit -1

    outfile="${outfolder}/${1%.*}.m4v"

    num=1
    while [ -f "$outfile" ]; do
        echo "output file exists, adding number"
        outfile="${1%.*}-$num.m4v"
        let "num += 1"
    done

    pass=0
    if [ "$codec" = "lavc" ]; then
        while [ "$pass" -lt "$passes" ]; do
            let "pass += 1"
            echo --- Pass $pass of $passes Pass LAVC Encoding ---
            echo $outfile
            echo $width x $height, $bitrate-$bitratemax
            sleep 1
            encopts="aglobal=1:vglobal=1:vcodec=mpeg4:vbitrate=$bitrate:acodec=libfaac:abitrate=128"
            [ "$passes" -gt "1" ] && encopts="$encopts:vpass=$pass"
            echo $encopts
            sleep 1
            mencoder "$infile" $quiet -ofps 30 -sws 9 -of lavf -lavfopts format=ipod \
                -vf scale=-10:$height,dsize=$width:$height:0,harddup \
                -ovc lavc \
                -lavcopts $encopts \
                -oac faac \
                -alang en \
                -sub "${infile/${infile: -3}/srt}" \
                -srate 22050 \
                -o "$outfile"
            EXIT_CODE="$?"
            [[ "$?" != "0" ]] && exit "$EXIT_CODE"
        done

    elif [ "$codec" = "h264" ]; then
        while [ "$pass" -lt "$passes" ]; do
            let "pass += 1"
            echo --- Pass $pass of $passes Pass H264 Encoding ---
            echo $outfile
            echo $width x $height, $bitrate-$bitratemax
            sleep 1
            encopts="bitrate=$bitrate:vbv_maxrate=$bitratemax:vbv_bufsize=2000:nocabac:me=hex:subq=4:frameref=2:trellis=1:level_idc=30:global_header:threads=auto"
            [ "$passes" -gt "1" ] && encopts="$encopts:pass=$pass"
            echo $encopts
            sleep 1
            mencoder "$infile" $quiet -ofps 30 -sws 9 -of lavf -lavfopts format=ipod \
                -vf scale=-10:$height,dsize=$width:$height:0,harddup \
                -ovc x264 \
                -x264encopts $encopts \
                -oac faac \
                -alang en \
                -faacopts mpeg=4:object=2:br=160:raw -channels 2 \
                -srate 48000 \
                -sub "${infile/${infile: -3}/srt}" \
                -o "$outfile"
            EXIT_CODE="$?"
            if [[ "$?" != "0" ]]; then exit "$EXIT_CODE"; fi
        done
    fi

    shift
done

#
####
