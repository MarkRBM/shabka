#!/usr/bin/env python
#
#   vim:ft=python:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   $Id: dumpcookies 863 2008-04-01 14:06:07Z wael $
#
#   Copyright (c) 2008 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

# Import required libraries.#{{{
import sqlite3
import sys
from optparse import OptionParser
#}}}
# Convert sqlite cookie file to txt.#{{{
def dumpcookies(input, output):
    conn = sqlite3.connect(input)
    cur = conn.cursor()
    cur.execute('SELECT host, path, isSecure, expiry, name, value FROM moz_cookies')
    f = open(output, 'w')
    i = 0
    for row in cur.fetchall():
        f.write("%s\tTRUE\t%s\t%s\t%d\t%s\t%s\n" % (row[0], row[1], str(bool(row[2])).upper(), row[3], str(row[4]), str(row[5])))
        i += 1
    print "%d rows written" % i
    f.close()
    conn.close()
#}}}
# Check if file is readable.#{{{
def fileReadable(f):
    try:
        file = open(f)
    except IOError:
        exists = 0
    else:
        exists = 1
    return exists
#}}}
# Main#{{{
if __name__ == '__main__':
    parser = OptionParser("usage: %prog -i cookies.sqlite -o cookies.txt",
                          description = "Convert firefox's cookies.sqlite to standard cookies.txt file.")
    parser.add_option('-i', '--input', type="string", default=-1, help="input file (sqlite)")
    parser.add_option('-o', '--output', type="string", default=-1, help="output file (txt)")

    (opts, args) = parser.parse_args()

    if len(sys.argv) < 4:
        parser.print_help(sys.stderr)
        sys.exit(0)

    if not fileReadable(opts.input):
        print("File " + opts.input + " is not readable, maybe it doesn't exist??")
        sys.exit(1)

    dumpcookies(opts.input, opts.output)
#}}}
