#!/usr/bin/env bash
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   $Id: pacman-drive 783 2008-03-24 12:20:18Z wael $
#
#   This script will create a small drive for pacman usage
#   It will increase pacman speed around 60%
#   Copyright (C) 2006, Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

# Source the functions file
[ -e /usr/lib/frugalware/fwmakepkg ] && . /usr/lib/frugalware/fwmakepkg

myver='1.0'
pacman_db="/var/lib/pacman"
pacman_drive="/var/lib/pacman.img"
pacman_backup="/root/pacman-database.tar.bz2"
img_size=200 # In Mega-byte

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        return 1
    fi
}

die () {
    cleanup
    rm -f /tmp/pacman.lck
    if [ "${action}" = "delete" ]; then
        # If we were trying to delete the pacman-drive
        # we should mount back the database!
        mount -t ext2 -o loop "${pacman_drive}" "${pacman_db}" >/dev/null 2>&1
    fi
    Fdie "$@"
}

usage () {
    echo "pacman-drive $myver"
    echo "usage: $0 <action>"
    echo "action can be:"
    echo "  create  create the pacman-drive and use it."
    echo "  delete  delete the pacman-drive and use the usual folder."
    echo ""
    echo "This script will create a small (200 Mb) image to use it as"
    echo "pacman database, the file will have an ext2 filesystem."
}

### Generate md5sum of a directory and print it into a file
 # @param directory to get the md5 for
 # @param file to put the output in
 ##
get_dir_md5() {
    [ -z "${1}" -o -z "${2}" ] && \
        return 1
    [ ! -d "${1}" -o -f "${2}" ] && \
        return 1

    find "${1}" -type f | sort | xargs md5sum > "${2}" 2>/dev/null || \
        die "Error generating md5sum of ${1}"
    return 0
}

prepare_drive() {
    if [ -f "${pacman_backup}" ]; then
        die "${pacman_backup} file already exists, please remove it first."
    else
        Fmessage "backing up the pacman database."
        tar cjf "${pacman_backup}" "${pacman_db}" >/dev/null 2>&1 || \
            die "Error creating the backup tarball."
    fi
    pacdrivetmp="$(mktemp -d /tmp/pacdrivetmp.XXXX)"
    paclibtmp="$(mktemp -d /tmp/paclibtmp.XXXX)"
    old_md5="$(mktemp /tmp/pac-db-old.XXXX)"
    new_md5="$(mktemp /tmp/pac-db-new.XXXX)"
    touch /tmp/pacman.lck
}

cleanup() {
    if grep -q "${pacdrivetmp}" /proc/mounts &>/dev/null; then
        umount "${pacdrivetmp}" >/dev/null 2>&1
    fi
    rm -rf "${pacdrivetmp}" "${paclibtmp}" "${old_md5}" "${new_md5}" /tmp/pacman.lck
}

create_drive() {
    prepare_drive

    if [ -f "${pacman_drive}" ]; then
        die "${pacman_drive} already exist."
    fi

    Fmessage "creating pacman.img loopback file..."
    dd if=/dev/zero of="${pacman_drive}" bs=1M count="${img_size}" > /dev/null 2>&1 || \
        die "Error create the pacman image drive."
    yes | mkfs.ext2 -O dir_index -b 1024 -i 1024 -m 0 "${pacman_drive}" > /dev/null 2>&1 || \
        die "Could not create image filesystem."

    Fmessage "mounting pacman-drive to a temporary mount point."
    mount -t ext2 -o loop "${pacman_drive}" "${pacdrivetmp}" >/dev/null 2>&1 || \
        die "Error mounting pacman drive to a temporary mount point."

    Fmessage "Copying pacman database to the temporary mount point."
    cp -a "${pacman_db}/." "${pacdrivetmp}/" >/dev/null 2>&1 || \
        die "Error copying the database."

    Fmessage "Generating md5sum of the old and new database."
    get_dir_md5 "${pacman_db}" "${old_md5}"
    get_dir_md5 "${pacdrivetmp}" "${new_md5}"

    Fmessage "Unmount the temporary mount point."
    umount "${pacdrivetmp}" || \
        die "Error while unmounting the temporary mount point."

    Fmessage "Comparing the old and new database."
    diff "${old_md5}" "${new_md5}" &>/dev/null
    if [ $? -ne 0 ]; then
        rm -f "${pacman_drive}"
        die "md5 of the old and new database does not match, Aborting..."
    fi

    # Ok now let's remove the old database folder, and finishing the task
    Fmessage "removing the old database folder."
    rm -rf "${pacman_db}"

    # mounting the new db
    mkdir -p "${pacman_db}"
    mount -t ext2 -o loop "${pacman_drive}" "${pacman_db}" || \
        die "Error mounting pacman-drive."

    # adding the loop device to fstab
    if ! grep -q "${pacman_drive}" /etc/fstab &>/dev/null; then
        Fmessage "Adding loop device to fstab."
        echo "${pacman_drive} ${pacman_db} ext2 loop,defaults 0 0" >> /etc/fstab
    else
        warning "pacman-drive entry already exist in fstab. Skipping..."
    fi

    Fmessage "Removing leftover files."
    cleanup

    Fmessage "Done..."
}

delete_drive() {
    prepare_drive

    if [ ! -f "${pacman_drive}" ]; then
        die "${pacman_drive} does not exist, aborting..."
    fi

    Fmessage "Unmounting pacman database."
    umount "${pacman_db}" >/dev/null 2>&1 || \
        die "Error while unmounting the old database."

    Fmessage "mounting pacman-drive to a temporary mount point."
    mount -t ext2 -o loop "${pacman_drive}" "${pacdrivetmp}" >/dev/null 2>&1 || \
        die "Error mounting pacman drive to a temporary mount point."

    Fmessage "Copying pacman-database to a new folder."
    cp -a "${pacdrivetmp}/." "${paclibtmp}/" >/dev/null 2>&1 || \
        die "Error while copying pacman-database to a new folder."

    Fmessage "Generating md5 of the old and new database."
    get_dir_md5 "${pacdrivetmp}" "${old_md5}"
    get_dir_md5 "${paclibtmp}" "${new_md5}"

    Fmessage "Unmount the temporary mount point."
    umount "${pacdrivetmp}" || \
        die "Error while unmounting the temporary mount point."

    Fmessage "Comparing the old and new database."
    diff "${old_md5}" "${new_md5}" &>/dev/null
    if [ $? -ne 0 ]; then
        die "md5 of the old and new database does not match, Aborting..."
    fi

    # Ok everything checked let's continue
    Fmessage "Unmounting pacman database (if mounted)"
    umount "${pacman_db}" >/dev/null 2>&1

    Fmessage "Removing the pacman-drive loopback file..."
    rm -rf "${pacman_db}" || \
        die "Couldn't remove the old pacman database..."
    rm -f "${pacman_drive}" || \
        die "Couldn't remove the pacman-drive loopback file..."

    Fmessage "moving the new one to ${pacman_db}"
    mv "${paclibtmp}" "${pacman_db}" >/dev/null 2>&1 || \
        die "Error while moving the new one to ${pacman_db}."
    # We don't need the lost+found folder
    rm -rf "${pacman_db}/lost+found" >/dev/null 2>&1

    Fmessage "Removing pacman-drive entry from fstab"
    sed -e "s@.*${pacman_drive}.*${pacman_db}.*@@g" -i /etc/fstab

    Fmessage "Removing leftover files."
    cleanup

    Fmessage "Done..."
}

# Sanity checks
check_root || die "You must be root to run pacman-drive"

# Include util.sh
Finclude util || die "Cannot import basic function, please run repoman upd"

# Check if kernel has BLK_DEV_LOOP support
if [ -f /proc/config.gz ]; then
    unset temp
    temp="$(zcat /proc/config.gz | grep "BLK_DEV_LOOP")"
    if [ "${temp}" != "CONFIG_BLK_DEV_LOOP=y" -a "${temp}" != "CONFIG_BLK_DEV_LOOP=m" ]; then
        error "Your kernel does not support loopback device, please recompile your kernel"
        plain "and make sure that CONFIG_BLK_DEV_LOOP equal m or y (NOT n)"
        exit 1
    fi
    unset temp
else
    unset agree
    warning "/proc/config.gz does not exist.. Cannot check for BLK_DEV_LOOP support."
    plain "If you are sure that your kernel support loopback device, type :"
    while [ "${agree}" != "I AM SURE THAT MY KERNEL SUPPORT LOOPBACK DEVICE" ]; do
        plain "I AM SURE THAT MY KERNEL SUPPORT LOOPBACK DEVICE"
        read agree
        agree="${agree}" #trim spaces...
    done
    unset agree
fi

if [ -f /tmp/pacman.lck ]; then
    error "Cannot run pacman-drive while using pacman."
    exit 1
fi

action="${1}"

if [ -z "${action}" -o \( "${action}" != "create" -a "${action}" != "delete" \) ]; then
    usage
    exit 1
fi

case "${action}" in
    create) create_drive ;;
    delete) delete_drive ;;
    *)      usage; exit 1 ;;
esac

# End Of File
# vim: set ft=sh ts=4 sts=4 sw=4 expandtab:
