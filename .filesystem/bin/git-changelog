#!/usr/bin/python
# Copyright 2008 Marcus D. Hanwell <marcus@cryos.org>
# Distributed under the terms of the GNU General Public License v2 or later

import string, re, os, sys

# Execute git log with the desired command line options.
fin = os.popen('git log --summary --no-merges --date=short', 'r')
# Create a ChangeLog file in the current directory.
fout = open('ChangeLog', 'w')

# Set up the loop variables in order to locate the blocks we want
commitHash = ""
authorFound = False
dateFound = False
messageFound = False
message = ""
messageNL = False
filesFound = False
files = ""
prevAuthorLine = ""

# The main part of the loop
for line in fin:
    # The commit line marks the start of a new commit object.
    if string.find(line, 'commit') >= 0:
        # Start all over again...
        re.match('commit', line)
        commitHash = re.split(' ', line, 1)[1]
        authorFound = False
        dateFound = False
        messageFound = False
        messageNL = False
        message = ""
        filesFound = False
        files = ""
        continue
    # Match the author line and extract the part we want
    elif re.match('Author:', line) >=0:
        authorList = re.split(': ', line, 1)
        author = authorList[1]
        author = author[0:len(author)-1]
        authorFound = True
    # Match the date line
    elif re.match('Date:', line) >= 0:
        dateList = re.split(':   ', line, 1)
        date = dateList[1]
        date = date[0:len(date)-1]
        dateFound = True
    # The svn-id lines are ignored
    elif re.match('    git-svn-id:', line) >= 0:
        continue
    # The sign off line is ignored too
    elif re.search('Signed-off-by', line) >= 0:
        continue
    # Extract the actual commit message for this commit
    elif authorFound & dateFound & messageFound == False:
        # Find the commit message if we can
        if len(line) == 1:
            if messageNL:
                messageFound = True
            else:
                messageNL = True
        elif len(line) == 4:
            messageFound = True
        else:
            if len(message) == 0:
                message = message + line.strip()
            else:
                message = message + " " + line.strip()
    # Collect the files for this commit.
    elif authorFound & dateFound & messageFound:
        command = "git show --format=oneline --stat --no-merges %s" % (commitHash.rstrip())
        output = os.popen(command)
        files = "    Files changed:\n"
        for line in output:
          if re.match(' ', line):
            filesFound = True
            files += "      " + line.strip() + "\n"
    # All of the parts of the commit have been found - write out the entry
    if authorFound & dateFound & messageFound & filesFound:
        # First the author line, only outputted if it is the first for that
        # author on this day
        authorLine = date + "  " + author
        if len(prevAuthorLine) == 0:
            fout.write(authorLine + "\n")
        elif authorLine == prevAuthorLine:
            pass
        else:
            fout.write("\n" + authorLine + "\n")

        # Assemble the actual commit message line(s) and limit the line length
        # to 80 characters.
        commitLine = message
        i = 0
        commit = ""
        sep = ""
        while i < len(commitLine):
            if len(commitLine) < i + 76:
                commit = commit + sep + commitLine[i:len(commitLine)]
                break
            index = commitLine.rfind(' ', i, i+76)
            if index > i:
                commit = commit + sep + commitLine[i:index]
                i = index+1
            else:
                commit = commit + sep + commitLine[i:76]
                i = i+77

            sep = "\n    "

        # Write out the commit line
        fout.write("  * " + commit + "\n\n")

        # Write the changed files
        fout.write(files + "\n")

        #Now reset all the variables ready for a new commit block.
        authorFound = False
        dateFound = False
        messageFound = False
        messageNL = False
        commitHash = ""
        message = ""
        filesFound = False
        files = ""
        prevAuthorLine = authorLine

# Close the input and output lines now that we are finished.
fin.close()
fout.close()
