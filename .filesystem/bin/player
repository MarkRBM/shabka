#!/usr/bin/env bash
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   $Id: player 789 2008-03-24 13:02:06Z wael $
#
#   A little script to make mplayer a totem-like player from One point of vue of course
#   This little script will open an mplayer window at the far top/left of the screen
#   with a fixed (320 pixel) size, and will use it for all the next videos to play,
#   very usefull, and saves a lot of headaches when opening Video Clips while working
#   or surfing the net :)
#
#   Copyright (c) 2007 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

# TODO: Add/Test appending to playlist with -a option

# Bootstrap{{{
bootstrap="`dirname $0`/.bootstrap"
if [ -f "${bootstrap}" ]; then
    source "${bootstrap}"
else
    echo "Cannot bootstrap"
    exit 54
fi
unset bootstrap
#}}}
# Defining some default variables.#{{{
Fifo="$HOME/.mplayer/input.fifo"
Output="${HOME}/.mplayer/output.txt"
Mplayer="$(which mplayer)"
MplayerResume="${HOME}/bin/mplayer-resume"
#}}}
# Source the configuration file, or create it if it doesn't exist.#{{{
if [[ -f "${HOME}/.playerrc" ]]; then
    source $HOME/.playerrc
else
    cat << EOF > $HOME/.playerrc
# player configuration file

# Use Gui?
UseGui="yes"

# Skin for the GUI
GuiSkin="default"

# Gui Position
GuiPosition="543:696"

# Geometry "x:y"
MplayerGeometry="0:0"

# Window Size "Width:Height"
# If you want to keep aspect ratio, Omit Height: "Width"
WindowSize="320"

# Stay on top?
StayonTop="yes"

# Fifo file which will be used to pass command to the
# running mplayer instance
Fifo="${HOME}/.mplayer/input.fifo"

# Output is the file will stdin and stdout of mplayer will be written
Output="${HOME}/.mplayer/output.txt"

# Load Subtitles ??
LoadSubtitles="Yes"

# Load Edl files ??
LoadEdl="Yes"
EOF
    source $HOME/.playerrc
fi
#}}}
# Sanity checks.#{{{
# Just a sanity check in case an idiot trying to use mplayer without installing it
if [ ! -x "${Mplayer}" ]; then
    print_error 0 "Wow hold on man, go install mplayer first\!"
    exit 1
fi
#}}}

# Check for mplayer-resume, launch if not running
#if ! ps -edf | grep -v grep | grep mplayer-resume > /dev/null; then
#    "${MplayerResume}"
#fi

####
# Functions

# convert_path: converts a path with symlinks to absolute path.#{{{
# takes one argument
function convert_path()
{
    local path="${@}"
    if [ "${path}" = "/" ]; then
        # We are at /, So just echo it and return.
        echo "${path}"
        return 0
    elif [ -L "${path}" ]; then
        # Ok the current path is a symlink, convert it!
        local realpath="$(readlink ${path%%/})"
        if [ "${realpath:0:1}" = "/" ]; then
            # Absolute path just echo it.
            echo "${realpath}"
            return 0
        else
            # Relative path must have dirname in it!
            echo "$( cd "$(dirname "${path}")/${realpath}" && pwd )"
            return 0
        fi
    else
        echo "$( convert_path $(dirname "${path}") )/$(basename "${path}")"
        return 0
    fi
}
#}}}

#
####

# Check for options#{{{
Options=""
#Options="-vfm ffmpeg -lavdopts lowres=1:fast"
case "${1}" in
    "-f")
        Options="${Options} -fs"
        shift
        ;;
esac
if isTrue "${StayonTop}"; then
    Options="${Options} -ontop"
fi
#}}}
# Handle the case of a DVD.#{{{
# If it's a DVD then we must not have Path and File, and we should not look for
# subtitles nor EDL files..
if [ "${1}" = "dvd://" ]; then
    Path=""
    File="dvd://"
    LoadSubtitles=false
    LoadEdl=false
    # Make sure the cdrom is mounted
    sudo mount /mnt/cdrom &> /dev/null
else
    # Generate absolute path.
    Path="$( convert_path "$( cd "$(dirname "${@}")" && pwd )" )"
    File="$(basename "${@}")"

    # Does Path have // at the begining ?
    [ "${Path:0:2}" = "//" ] && Path="${Path##/}"
fi
#}}}
# Loading EDL here is Temporary until mplayer can load it via slave mode#{{{
if isTrue "${LoadEdl}"; then
    Edl=( $(find -L "${Path}" -maxdepth 2 -name "${File%.*}*.edl") )
    if [ "${#Edl[@]}" -gt "0" ]; then
        Edl="$(construct_filelist ${Edl[@]})"
        #  FIXME: EDL loading does not accept '' so I have to come up with
        #  a better way for paths with spaces, for now just remove it...
        Options="${Options} -edl $(extract_filename ${Edl[0]})"
    fi
fi
#}}}
# Start mplayer with collected information.#{{{
# is mplayer already running ??
if [ "${File}" = "dvd://" ]; then
    print_info 0 "Loading a DVD movie..."
else
    print_info 0 "Loading the file ${Path}/${File}"
fi
if ps -edf | grep -v grep | grep "mplayer.*-input file=${Fifo}" > /dev/null; then
    if [ "${File}" = "dvd://" ]; then
        ( echo "loadfile \"${File}\"" > "${Fifo}" & ) &> /dev/null
    else
        ( echo "loadfile \"${Path}/${File}\"" > "${Fifo}" & ) &> /dev/null
    fi
else
    # Chdir to the screenshot folder#{{{
    [[ ! -d "$HOME/.mplayer/screenshots" ]] && mkdir -p "$HOME/.mplayer/screenshots"
    cd "$HOME/.mplayer/screenshots"
    #}}}
    # Creating the FIFO file in case it doesn't exist.#{{{
    [ ! -e ${Fifo} ] && mkfifo "${Fifo}"
    #}}}
    # Do we use a GUI?#{{{
    if isTrue "${UseGui}"; then
        GuiOptions="-gui yes -skin ${GuiSkin}"
        # I have no idea why mplayer ignores -geometry if it already had -gui
        # So I will use sed to change the x and y values in .mplayer/gui.conf
        temp_x="$(echo "${MplayerGeometry}" | cut -d':' -f1)"
        temp_y="$(echo "${MplayerGeometry}" | cut -d':' -f2)"
        sed -e "s@\(gui_video_out_pos_x\).*@\1 = \"${temp_x}\"@g" \
            -e "s@\(gui_video_out_pos_y\).*@\1 = \"${temp_y}\"@g" \
            -i "${HOME}/.mplayer/gui.conf"
        temp_x="$(echo "${GuiPosition}" | cut -d':' -f1)"
        temp_y="$(echo "${GuiPosition}" | cut -d':' -f2)"
        sed -e "s@\(gui_main_pos_x\).*@\1 = \"${temp_x}\"@g" \
            -e "s@\(gui_main_pos_y\).*@\1 = \"${temp_y}\"@g" \
            -i "${HOME}/.mplayer/gui.conf"
        unset temp_x temp_y
    else
        GuiOptions=""
    fi
    #}}}
    # Load mplayer.#{{{
    if [ "${File}" = "dvd://" ]; then
        # First get the DVD titles.
        DvdTitles="$( midentify dvd:// | grep ID_DVD_TITLES | cut -d'=' -f2 )"
        ( ${Mplayer} ${GuiOptions} -idx -quiet -geometry ${MplayerGeometry} -xy ${WindowSize} -slave -input file="${Fifo}" ${Options} $( for Title in $( fseq 1 ${DvdTitles} ); do echo "dvd://${Title}"; done ) & ) &> "${Output}"
    else
        ( ${Mplayer} ${GuiOptions} -idx -quiet -geometry ${MplayerGeometry} -xy ${WindowSize} -slave -input file="${Fifo}" ${Options} "${Path}/${File}" & ) &> "${Output}"
    fi
    #}}}
fi
#}}}
# Load Subtitles.#{{{
# Is there subtitles for this movie? if there is Load them
# Subtitles must begin with the same name as the movie (without the extension)
if isTrue "${LoadSubtitles}"; then
    Subtitles=( $(find -L "${Path}" -mindepth 2 -maxdepth 3 -name "${File%.*}*.srt" -o -name "${File%.*}*.sub") )
    if [ "${#Subtitles[@]}" -gt "0" ]; then
        Subtitles="$(construct_filelist ${Subtitles[@]})"
        for i in $( fseq 0 $[ ${#Subtitles[@]} - 1 ] ); do
            if echo "$(extract_filename ${Subtitles[$i]})" | grep -q "/.Trash/"; then
                continue
            fi
            print_info 2 "Loading the subtitle $(extract_filename ${Subtitles[$i]})"
        done

        # Start a background operation.#{{{
        (
            # Give mplayer some time to load properly.
            sleep 3

            # Now load subtitles one by one
            for i in $( fseq 0 $[ ${#Subtitles[@]} - 1 ] ); do
                if echo "$(extract_filename ${Subtitles[$i]})" | grep -q "/.Trash/"; then
                    continue
                fi
                ( echo "sub_load \"$(extract_filename ${Subtitles[$i]})\"" > "${Fifo}" & ) &> /dev/null
            done &
        ) & > /dev/null
        #}}}
    fi
fi
#}}}

# ATM mplayer does not support loading EDL via slave mode
# So it can only be loaded with the file when mplayer is not
# running...
## Is there edl files for this movie ??
#Edl=( $(find "${Path}" -name "${File%.*}*.edl") )
#if [ "${#Edl[@]}" -gt "0" ]; then
#    # Give mplayer some time to load properly.
#    sleep 1
#fi
