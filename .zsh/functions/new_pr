#
# vim:ft=zsh:
#

function new_pr() {
  { # begin the always block
    function $0_help()
    {
      print_info "${log_depth}" "USAGE: new_pr [options] <message>"
      print_info "${log_depth}" "\t -h, --help        - this message"
      print_info "${log_depth}" "\t     --log-depth   - change the depth of the log Default: ${log_depth}"
    }

    local log_depth=0

    while [[ $# -ge 1 ]]; do
      case "${1}" in
        -h|--help)
          $0_help
          return 0
          ;;
        --log-depth)
          log_depth="${2}"
          if [[ -z "${log_depth}" ]]; then
            print_error "${log_depth}" "--log-depth requires an argument"
            $0_help
            return 1
          fi
          shift 2
          ;;
        *)
          local message="${@}"
          break
          ;;
      esac
    done

    if [[ -z "${message}" ]]; then
      print_error "${log_depth}" "message is required"
      $0_help
      return 1
    fi

    if [[ "x$(git rev-parse --git-dir 2> /dev/null)" = "x" ]]; then
      print_error 0 "not inside a git repository"
      return 1
    fi

    local git_dir="$(git rev-parse --git-dir 2> /dev/null)"
    local branch="$(current_branch)"
    local story="$(echo "${branch}" | grep '^[[:alpha:]][[:alpha:]]*-[[:digit:]][[:digit:]]*$')"

    if [[ "${git_dir}" = ".git" ]]; then
      local repo="${PWD##${GOPATH}/src/github.com/}"
    else
      local repo="${git_dir##${GOPATH}/src/github.com/}"
      repo="${repo%%.git}"
    fi

    if [[ "x${story}" != "x" ]]; then
      local title="${message} (${story})"
    else
      local title="${message}"
    fi

    debug "title => ${title}"
    debug "repo => ${repo}"
    debug "story => ${story}"

    local body="$( curl -s -X POST "https://api.github.com/repos/${repo}/pulls" \
      -H "Accept: application/vnd.github.v3+json" \
      -H "Authorization: token $(cat ${HOME}/.github_token)" \
      --data-binary "{\"title\":\"${title}\",\"head\":\"${branch}\",\"base\":\"master\",\"maintainer_can_modify\":true}" )"

    local url="$(echo "${body}" | jq -r '._links.html.href')"

    if ! [[ "${url}" =~ "^https://github.com/${repo}/pull/" ]]; then
      print_error "${log_depth}" "URL was not found, something went wrong. Body following"
      echo "${body}"
      return 1
    fi

    echo "${url}" | xsel --clipboard -i
    echo "${url} copied to the clipboard"
  } always {
    unfunction -m "$0_*"
  }
}
