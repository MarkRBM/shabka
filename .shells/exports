# vim: set ft=sh ts=4 sts=4 sw=4 expandtab:
#
# $Id: exports 1429 2009-05-31 03:56:15Z wael $

# Sanity Check.
if [ x"${HOME}" = "x" ]; then
  export HOME=$(cd ~ ; pwd)
fi
if [ x"${HOSTNAME}" = "x" ]; then
  export HOSTNAME=$(hostname)
fi

# ME :D
export FULLNAME="Wael Nasreddine"
export EMAIL="wael.nasreddine@gmail.com"

# Export the system type.
export SYSTEM="$( uname )"

# source the language file
source "${HOME}/.shells/lang"

# Find out where which is located and export it as W.
for BinDir in /usr/bin /bin /usr/local/bin; do
  if [ -x "${BinDir}/which" ]; then
    export W="${BinDir}/which"
    break
  fi
done
unset BinDir

# Some Stuf to the History
export HISTCONTROL=ignorespace:ignoredups   # Don't save duplicated stuff
export HISTIGNORE="&:[bf]g:exit"            # Ignore some commands
export HISTFILESIZE=10000                   # History Size
export HISTSIZE=10000                       #   //     //
export INPUTRC=~/.inputrc                   # Inputrc file
export MAIL=~/.mail                         # Default email folder
export MAILCHECK=0                          # Disable mail checking.
export IGNOREEOF=3
export EDITOR="vim"                         # Default Editor is gvim
export VISUAL=vim                           # Default Visual
if [ "${SYSTEM}" = "Linux" ]; then
  export PAGER=least                        # Use an inernally defined function
                                            # which will either cat or LEAST_PAGER
                                            # depending on the length of the output..
else
  export PAGER=less
fi

if ${W} most &> /dev/null; then
  export LEAST_PAGER=most                   # the PAGER that'll be used by least
  export MANPAGER=most                      # Man page viewer
else
  export LEAST_PAGER=less                   # the PAGER that'll be used by least
  export MANPAGER=less                      # Man page viewer
fi

if [ "${SYSTEM}" = "Linux" ]; then
    # PACKAGER value for makepkg
    export PACKAGER='Wael Nasreddine <wael.nasreddine@gmail.com>'

    # Use openoffice with gnome look.
    export OOO_FORCE_DESKTOP=gnome

    # Export DISTCC_DIR so distccmon-gnome works
    [[ -d "/var/tmp/portage" ]] && export DISTCC_DIR=/var/tmp/portage/.distcc
fi

# Export the default options to pass to devtodo.
export TODO_OPTIONS="--timeout --summary"

# LS options
# Sometimes I can't assign a new value for LS_OPTIONS so make sure
# errors get discarded
export LS_OPTIONS='-h'
if [ "${SYSTEM}" = "Linux" ]; then
    # Do we have GNU ls of a new enough version for color?
    if ls --help 2>/dev/null | grep -q -- '--color=' 2> /dev/null; then
        export LS_OPTIONS="${LS_OPTIONS} --color=always"
    fi
elif [ "${SYSTEM}" = "FreeBSD" -o "${SYSTEM}" = "Darwin" ]; then
    export LS_OPTIONS="${LS_OPTIONS} -G"
fi

# alias ack='ack --color'
export ACK_OPTIONS="--color"

# watch for people
watch=(notme)                   # watch for everybody but me
LOGCHECK=300                    # check every 5 min for login/logout activity

# The format of login / logout reports if the watch parameter is set.
# Default is `%n has %a %l from %m'.
# Recognizes the following escape sequences:
#   %n = name of the user that logged in/out.
#   %a = observed action, i.e. "logged on" or "logged off".
#   %l = line (tty) the user is logged in on.
#   %M = full hostname of the remote host.
#   %m = hostname up to the first `.'.
#   %t or %@ = time, in 12-hour, am/pm format.
#   %w = date in `day-dd' format.
#   %W = date in `mm/dd/yy' format.
#   %D = date in `yy-mm-dd' format.
# WATCHFMT='%n %a %l from %m at %t.'
# WATCHFMT='*knock* *knock* Follow the white rabbit => %n %a %l from %m at %t.'
# WATCHFTM=print '\e[1;35m%B[%b\e[1;32m%B%n%b\e[1;35m%B]%b \e[1;34m%U%a%u \e[1;35mfrom terminal \e[1;31m%M \e[1;35mat \e[1;33m%U%T%u\e[0m''
#WATCHFMT="[%B%t%b] %B%n%b has %a %B%l%b from %B%M%b"
WATCHFMT="%B->%b %n has just %a %(l:tty%l:%U-Ghost-%u)%(m: from %m:)"

# Add my custom PERL path to PERL5LIB
export PERL5LIB="$HOME/.filesystem/lib/perl5/site_perl"

# TERM Mutations (Only 256 colors please
[[ "${TERM}" = 'xterm' ]] && export TERM='xterm-256color'
[[ "${TERM}" = 'screen' ]] && export TERM='screen-256color'

#################################
############ RUBY ###############
#################################

# Ruby 19!!
export JRUBY_OPTS="--1.9"
export RBXOPT="-X19"

# Speed up Ruby
# https://gist.github.com/1688857
export RUBY_HEAP_MIN_SLOTS=1000000
export RUBY_HEAP_SLOTS_INCREMENT=1000000
export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
export RUBY_GC_MALLOC_LIMIT=1000000000
export RUBY_HEAP_FREE_MIN=500000

#################################
############ PATH ###############
#################################

# Add /sbin and /usr/sbin
if [ -x "/usr/libexec/path_helper" ]; then
  eval `/usr/libexec/path_helper -s`
else
  if ! echo "${PATH}" | grep -q "sbin"; then
      export PATH="/usr/local/sbin:/usr/sbin:/sbin:${PATH}"
  fi
fi

# export any bin folder in ~/opt/
if [ `find ${HOME}/.filesystem/opt/ -maxdepth 2 -name bin -type d | wc -l` -gt 0 ]; then
  for i in `find ${HOME}/.filesystem/opt/ -maxdepth 2 -name bin -type d`; do
    export PATH="${i}:${PATH}"
  done
fi

# Export my local bin directory
# export it at first, so it will be checked first!
MY_PATH=""
if [ -d "${HOME}/.filesystem/bin" ]; then
  for dir in `find "${HOME}/.filesystem/bin" -type d -name bin`; do
    MY_PATH="${MY_PATH}:${dir}"
  done
fi
if [ -d "${HOME}/.filesystem/usr/bin" ]; then
  for dir in `find "${HOME}/.filesystem/usr/bin" -type d -name bin`; do
    MY_PATH="${MY_PATH}:${dir}"
  done
fi
# Export the constructed folders
MY_PATH="${MY_PATH}:${PATH}"
oldifs="${IFS}"
export IFS=":"
export PATH="`echo "${MY_PATH}" | sed -e 's@::@:@g' -e 's@//@/@g' | uniq | sed -e 's@::@:@g' -e 's@//@/@g'`"
export IFS="${oldifs}"
unset dir MY_PATH oldifs

# MySQL User and Password
if [[ -f "${HOME}/.mysql_password" ]]; then
    user="`cat "${HOME}/.mysql_password" | grep 'username:' | cut -d' ' -f2`"
    pass="`cat "${HOME}/.mysql_password" | grep 'password:' | cut -d' ' -f2`"

    # Agence Durable
    export AD_DBUSERNAME="${user}"
    export AD_DBPASSWORD="${pass}"

    # Wildfire
    export WF_DBUSERNAME="${user}"
    export WF_DBPASSWORD="${pass}"

    unset user pass
fi

export CLASSPATH=$CLASSPATH:/usr/local/Cellar/clojure-contrib/1.2.0/clojure-contrib.jar

export ARCHFLAGS='-arch x86_64'
export NODE_PATH='/usr/local/lib/node_modules'
