#!/usr/bin/env gorun
// vim:ft=go

package main

import (
	"bytes"
	"crypto/hmac"
	"crypto/sha1"
	"encoding/base32"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path"
	"strings"
	"text/tabwriter"
	"time"
)

type totpSource struct {
	Name   string `json:"name"`
	Secret string `json:"secret"`
}

// Originally written by Joshua Peek <josh@joshpeek.com>
// https://github.com/josh/totp/blob/9b587d6bc564eadeae4787a4dd571fd810fc0a8c/totp.go#L58
//
// Copyright (c) 2014 Joshua Peek
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
func (t *totpSource) totp() string {
	key, _ := base32.StdEncoding.DecodeString(strings.ToUpper(t.Secret))
	hash := hmac.New(sha1.New, key)
	b := new(bytes.Buffer)
	binary.Write(b, binary.BigEndian, time.Now().Unix()/30)
	hash.Write(b.Bytes())

	h := hash.Sum(nil)
	o := h[len(h)-1] & 0xf
	c := int32(h[o]&0x7f)<<24 | int32(h[o+1])<<16 | int32(h[o+2])<<8 | int32(h[o+3])
	return fmt.Sprintf("%010d", c%100000000)[4:10]
}

func main() {
	var sources []*totpSource

	// Read the JSON config file.
	sourceFile, err := os.Open(path.Join(os.Getenv("HOME"), ".totprc"))
	if err != nil {
		log.Fatal(err)
	}
	sourceParser := json.NewDecoder(sourceFile)
	if err = sourceParser.Decode(&sources); err != nil {
		log.Fatal(err)
	}

	// Init the tabwriter.
	w := new(tabwriter.Writer)
	w.Init(os.Stdout, 0, 8, 0, '\t', 0)

	// Iterate over the sources and print them all to the writer.
	for _, s := range sources {
		if s.Secret == "" {
			fmt.Println("Secret is required. %s has not secret defined", s.Name)
			os.Exit(1)
		}

		fmt.Fprintf(w, "%s\t=> %s\n", s.Name, s.totp())
	}

	// Flush the writer.
	w.Flush()
}
