" ,----
" | Path
" `----

" set the path to find as many file as we can :)
" add the vim plugin search path
:set path+=./**,../,../*,../..,../../*,$HOME/.vim/*

" ,----
" | general
" `----

set runtimepath+=/usr/share/vim/vim70/autoload/
set runtimepath+=~/.vim/autoload/
set nocompatible            " get out of horrible vi-compatible mode
filetype plugin indent on   " detect the type of file
filetype indent on          " indent depending on the file type
set history=1000            " How many lines of history to remember
set cf                      " enable error files and error jumping
set clipboard+=unnamed      " turns out I do like is sharing windows clipboard
set ffs=unix,dos,mac        " support all three, in this order
filetype plugin on          " load filetype plugins
set viminfo='1000,f1,:1000,/1000
set viminfo+=!              " make sure it can save viminfo
" set isk+=_,$,@,%,#,-        " none of these should be word dividers, so make them not be
set noinsertmode            " don't start in insert mode
set cpoptions=aABceFsJWy    " set compatible options
set showcmd                 " show part of command beeing executed
set ignorecase              " ignore case for searching
set magic                   " extended regex

" ,----
" | Encodings
" `----
"for more details, read help usr_45.txt
" encodings configure
:let $LANG="en_US.UTF-8"

" set the encoding of menu text
:set langmenu=en_us.utf-8

" set what is the encoding of inputted text
if ! has("gui_running")
    :let &termencoding = &encoding
endif
:set encoding=utf-8

:set fileencodings=ucs-bom,utf-8,gb2312,cp936

:set splitbelow
:set splitright

" ,----
" | files / backup
" `----
set backup                      " make backup file
set backupdir=~/.vim/_backup    " where to put backup file
set directory=~/.vim/_temp      " directory is the directory for temp file
set makeef=error.err            " When using make, where should it dump the file
set noautowrite                 " safe automacially content
set modeline                    " activate modelines
set modelines=5                 " the first/last 5 lines can be a modeline
set suffixes=.aux,.bak,.dvi,.gz,.idx,.log,.ps,.swp,.tar

" viminfo
"
" Remember things between sessions
"
" '20  - remember marks for 20 previous files
" \"50 - save 50 lines for each register
" :20  - remember 20 items in command-line history
" %    - remember the buffer list (if vim started without a file arg)
" n    - set name of viminfo file
set viminfo='20,\"50,:20,%,n~/.viminfo,!

" ,----
" | UI / visual cues
" `----
set lsp=0               " space it out a little more (easier to read)
set wildmenu            " turn on wild menu
set ruler               " Always show current positions along the bottom
set cmdheight=1         " the command bar is 1 line high
set number              " turn on line numbers
set lz                  " do not redraw while running macros (much faster) (LazyRedraw)
set hidden              " you can change buffer without saving
"set backspace=2         " make backspace work normal
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l  " backspace and cursor keys wrap to
set shortmess=atI       " shortens messages to avoid 'press a key' prompt
set report=1            " tell us when anything is changed via :...
set noerrorbells        " don't make noise
set fillchars=vert:\ ,stl:\ ,stlnc:\   " make the splitters between windows be blank
set showmatch           " show matching brackets
set matchtime=2         " how many tenths of a second to blink matching brackets for
set nohlsearch          " do not highlight searched for phrases
set incsearch           " BUT do highlight as you type you search phrase
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$ " what to show when I hit :set list
set so=5                " Keep 10 lines (top/bottom) for scope
set novisualbell        " don't blink
set noerrorbells        " no noises
set showmode            " show mode in statusline
set startofline
set nosplitbelow
set esckeys             " allow cursor keys in insert mode
set showmatch           " show matching brackets
set wildchar=<TAB>      "
if v:version >= 700
    set nocursorcolumn      " no cursor column highlighting
    set nocursorline        " no cursor line highlighting
endif


" ,----
" | tty
" `----
set ttybuiltin          " use buildin tty
set ttyscroll=999       " tty scrolling
set tf
set t_vb=

" ,----
" | text formatting / layout
" `----
set fo=tcrqno           " See Help (complex)
"setting about indent
" autoindent is not very convenient especially when editing mail text,
" use filetype indent script instead
set noautoindent

" It seems smartindent make things bad instead of smart:
"  > You're probably setting 'smartindent' in your .vimrc.  'smartindent'
"  > is worse than cindent for C/C++/Java, and much worse than filetype
"  > indent scripts for other languages; I'd definitely recommend against
"  > using it.
set nosmartindent
" set cindent             " do c-style indenting
set tabstop=2           " tab spacing (settings below are just to unify it)
set softtabstop=2       " unify
set shiftwidth=2        " unify
set expandtab           " no real tabs please!
set noeol               " No newline at end of file
set nowrap              " do not wrap lines
set nosmarttab          " use spaces everywhere
set wrapmargin=0        " remove right border on automagic linebreaks
" set digraph             " allow 'umlaute'
set dictionary=/usr/local/dict/words,/usr/local/dict/german.words
let spell_auto_type = "tex,mail,text,html,sgml,cvs"
" let spell_auto_type = ""


" ,----
" | folding (Enable folding, but by default make it act like folding is off)
" `----
set foldenable          " Turn on folding
set foldmethod=indent   " Make folding indent sensitive
set foldlevel=100       " Don't autofold anything (but I can still fold manually)
set foldopen-=search    " don't open folds when you search into them
set foldopen-=undo      " don't open folds when you undo stuff

" ,----
" | Tags
" `----

" set tags
:set tags+=../tags,../../tags,ftags

" ,----
" | ctags
" `----
set tags=~/.ctags
let Tlist_Sort_Type = "name"        " order by
let Tlist_Use_Right_Window = 1      " split to the right side of the screen
let Tlist_Compart_Format = 1        " show small meny
let Tlist_Exist_OnlyWindow = 1      " if you are the last, kill yourself
let Tlist_File_Fold_Auto_Close = 0  " Do not close tags for other files
let Tlist_Enable_Fold_Column = 0    " Do not show folding tree
let Tlist_WinWidth = 40

" ,----
" | completion
" `----
set completeopt=longest,menuone,preview

" ,----
" | enhanced commentify
" `----
let g:EnhCommentifyMultiPartBlocks='yes'
let g:EnhCommentifyUseAltKeys='Yes'
let g:EnhCommentifyPretty='Yes'
let g:EnhCommentifyAlignRight = 'Yes'
let g:EnhCommentifyUseBlockIndent = 'Yes'
let g:EnhCommentifyRespectIndent = 'Yes'
let g:EnhCommentifyFirstLineMode = 'Yes'

" ,----
" | yankring
" `----
let g:yankring_map_dot = 1
let g:yankring_history_dir = "~/.vim/"

" ,----
" | showmarks
" `----
let g:showmarks_enable=0
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
let g:showmarks_textlower="\t"
let g:showmarks_textupper="\t"
let g:showmarks_textother="\t"

" ,----
" | NERD_commenter
" `----
let g:NERDShutUp=1

" ,----
" | ViM Blog
" `----
if !exists('*Wordpress_vim')
    runtime vimblog.vim
endif

" ,----
" | VTreeExplore
" `----
let g:treeExplVertical=1            " Open VSTreeExplore Vertically.
let g:treeExplWinSize=25            " Size of the Tree Explorer window.
let g:treeExplNoList=1              " Don't list Explorer in the Buffer.

" ,----
" | eclim
" `----
let g:EclimHome = '/usr/share/vim/vimfiles/eclim'
let g:EclimEclipseHome = '/usr/share/eclipse'
let g:EclimProjectTreeActions = [
        \ {'pattern': '.*', 'name': 'Edit', 'action': 'edit'},
        \ {'pattern': '.*', 'name': 'Split', 'action': 'split'},
        \ {'pattern': '.*', 'name': 'Tab', 'action': 'tabnew'},
    \ ]

let g:EclimProjectTreeAutoOpen = 1
let g:EclimProjectTreeExpandPathOnOpen = 1

" ,----
" | gitcommit
" `----
let g:git_diff_spawn_mode = 1

" ,----
" | neocomplcache
" `----

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" disable auto complete
let g:neocomplcache_disable_auto_complete = 1


" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  pumvisible() ? neocomplcache#smart_close_popup() : "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

" ,----
" | snipMate
" `----
let g:snips_author = 'Wael Nasreddine <wael.nasreddine@gmail.com>'

" vim:syntax=vim sw=4 ts=4 expandtab
