#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   $Id$
#
#   Copyright (c) 2008 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#
1   Comment Out Line Range
    ======================

    This is one of my favorite ex hacks. It's pretty old school and should
    work all the way back to the original Vi. This assumes your comment
    character is # (octothorpe), but would work just as well with // comments
    or any other line-wise comment character. Go to column zero of the first
    line you want to start your comment block on. Hit ma to set a mark. Now
    scroll down to column zero of the last line you want to comment out.
    Issue the following ex command:

    :'a, . s/^/# /

    That's it. It runs a substitute on the range from the mark stored in
    register 'a to the current line. Take note that you can specify ranges
    for any ex command using the same technique.

    ==
    Source: http://dailyvim.blogspot.com/2008/06/comment-out-line-range.html

2:  Reverse Lines in a File
    =======================
    You can quickly reverse all lines in a file using the following ex command.

    :g/^/m0

    This is particularly useful for files that are in chronological order such
    as logs or email mbox files. Thanks to Skyler for submitting the tip.

    ==
    Source: http://dailyvim.blogspot.com/2008/05/reverse-lines-in-file.html

3:  Remove Empty Lines
    ==================
    To Remove empty lines, use the following command

    :%g/^$/d

    ==
    Source: https://www.blogger.com/comment.g?blogID=6637736252081011583&postID=1412516715243746034

4:  Easier Search + Sub
    ===================
    To guarentee a pattern is found, instead of adding it directly to a
    pattern, search for it then issue the substitute with no pattern..

    Ex:

    "This is a line 12345"

    To replace 12345 with 7890, first look for digits

    /\d\+

    Now execute a sub with no pattern:

    :%s//7890/g

    The result would be:

    "this is a line 7890"

    ==
    Source: http://dailyvim.blogspot.com/2008/04/easier-search-sub.html

5:  Quick Uncomment
    ===============
    To uncomment a /* */ - style block comment, put the cursor on the beginning
    or ending tag - whichever is closest - and in normal mode, do %dd``dd

    this sequence jumps to the matching 'brace' (/* or */) deletes that one,
    then jumps to the previous jump point, which is of course the first 'brace.'
    you can replace dd with xx if the braces are not on their own lines for
    example:

    /* this.commentedInvocation(); */

    A really handy idiom that is great for large block-commented code.

    ==
    Source: http://dailyvim.blogspot.com/2008/04/quick-uncomment.html

6:  More Marks
    ==========
    Most people know the basics of using marks in Vim; however, there are some
    special mark locations you may not know about.

    `. - move cursor to the line and column of your last edit.
    '. - move cursor to the line of your last edit.
    `' - move to last jump position.
    `" - move to location before file file was last closed.

    :marks - show entire mark list :mark x - show mark stored in register x
    :jumps - show the entire jump list

    ctrl-o - move cursor to older position in jump list ctrl-i - move cursor to
    newer position in jump list

    In case you don't know basic marks, in normal mode, press m followed by a-z
    to set a given mark to your current position in the file. To jump back to
    that position type `a, `b, etc...

    A jump is executed whenever you move the cursor to an arbitrary position in
    the file, i.e., 123G (line 123).

    ==
    Source: http://dailyvim.blogspot.com/2008/02/more-marks.html


7:  Delete everything *but* quoted text
    ===================================
    To delete everything *but* quoted text, you have many ways. All of them are
    listed here:

    df"f"d$j0

    df"f"D+

    df"wD+

    but the best one is:

    di"Vp

    I also figured out how to do this on the whole file, thanks to globals:

    %g/.*/normal di"Vp/

    ==
    Source: http://dailyvim.blogspot.com/2008/02/golf.html

8:  Add and Substract
    =================
    Move your cursor over a number in Vim. In normal mode, press ctrl-a to
    increment it's value by one. Press ctrl-x to decrement it's value. Believe
    it or not, this actually comes in handy pretty often.

    NOTE: Since GNU Screen use Ctrl-a, to increment the number just use
    Ctrl-a + a instead.

    ==
    Source: http://dailyvim.blogspot.com/2008/02/add-and-subtract.html
