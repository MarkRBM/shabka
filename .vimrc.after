""
"" Functions
""

" Ruby addons
function! MyRubyAddons()
  " Call MyRubyAbbreviations
  call MyRubyAbbreviations()
endfunction

" Define my own abbreviations
function! MyRubyAbbreviations()
  ab pry require 'pry'<CR>binding.pry
endfunction

""
"" Defaults
""

" Paste toggle on key F12!
set pastetoggle=<F12>

" ,----
" | Windows
" `---
:set splitbelow   " Always split under
:set splitright   " Always split on the right

" ,----
" | files / backup
" `----
set backupdir=~/.vim/_backup    " where to put backup file
set directory=~/.vim/_temp      " directory is the directory for temp file
set makeef=error.err            " When using make, where should it dump the file
set noautowrite                 " safe automacially content
set modeline                    " activate modelines
set modelines=5                 " the first/last 5 lines can be a modeline
set autoread                    " Automatically read a file that has changed on disk

" ,----
" | viminfo
" `----
" Remember things between sessions
"
" '20  - remember marks for 20 previous files
" \"50 - save 50 lines for each register
" :20  - remember 20 items in command-line history
" %    - remember the buffer list (if vim started without a file arg)
" n    - set name of viminfo file
set viminfo='20,\"50,:20,%,n~/.viminfo,!

" ,----
" | UI / visual cues
" `----
color xoria256          " Xoria256 is good theme for Terminal mode.
set lsp=0               " space it out a little more (easier to read)
set wildmenu            " turn on wild menu
set wildignorecase      " Make it easier to complete buffers, open files, etc...
set ruler               " Always show current positions along the bottom
set cmdheight=1         " the command bar is 1 line high
set relativenumber      " turn on line numbers but display them as relative to the current line
set lz                  " do not redraw while running macros (much faster) (LazyRedraw)
set hidden              " you can change buffer without saving
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l  " backspace and cursor keys wrap to
set shortmess=atI       " shortens messages to avoid 'press a key' prompt
set report=1            " tell us when anything is changed via :...
set complete=.,w,b,t    " Same as default except that I remove the 'u' option
set noerrorbells        " don't make noise
set fillchars=vert:\ ,stl:\ ,stlnc:\   " make the splitters between windows be blank
set showmatch           " show matching brackets
set matchtime=2         " how many tenths of a second to blink matching brackets for
set nohlsearch          " do not highlight searched for phrases
set incsearch           " BUT do highlight as you type you search phrase
set list                " Show invisible characters
set listchars=trail:.,extends:>,precedes:< " what to show when I hit :set list
set so=5                " Keep 10 lines (top/bottom) for scope
set novisualbell        " don't blink
set showmode            " show mode in statusline
set startofline         " Move the cursor to the first non-blank of the line
set esckeys             " allow cursor keys in insert mode
set showmatch           " show matching brackets
set wildchar=<TAB>      " Which character activates the wildmenu
set showfulltag         " When completing by tag, show the whole tag, not just the function name
if v:version >= 700
    set nocursorcolumn      " no cursor column highlighting
    set nocursorline        " no cursor line highlighting
endif
if has("gui_running")
  "color railscasts+     " Lovely theme but sucks when in diff mode
  color solarized       " Truely amazing theme.
  set mouse=""          " I hate using the mouse for other than copying/pasting.
  set guioptions=cei    " Set the guioptions I like
  set guifont=Courier\ 10\ Pitch\ 10
endif

" ,----
" | Shell
" `----
if has("gui_macvim")
  set shell = bash        " Always use bash for the shell on mvim
                          " See https://github.com/carlhuda/janus/pull/229
endif

" ,----
" | Diff
" `----
set diffopt+=iwhite     " Add ignorance of whitespace to diff

" ,----
" | snipMate
" `----
let g:snips_author = 'Wael Nasreddine <wael.nasreddine@gmail.com>'

" ,----
" | NERDTree
" `----
"let g:loaded_nerd_tree=1  " Disable NERDTree, it is driving me mad.




" Setting this below makes it sow that error messages don't disappear after
" one second on startup.
" set debug=msg

" Make the 'cw' and like commands put a $ at the end instead of just deleting
" the text and replacing it
" set cpoptions=ces$

""
"" Mappings
""

" use :w!! to write to a file using sudo if you forgot to 'sudo vim file'
" (it will prompt for sudo password when writing)
cmap w!! %!sudo tee > /dev/null %

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" <leader><leader> toggles between files
nnoremap <leader><leader> <c-^>

" Next buffer
nmap <silent> <leader>. :bnext<CR>

" Previous buffer
nmap <silent> <leader>m :bprev<CR>

" Next tab
nmap <silent> ;' :tabnext<CR>
nmap <silent> ;l :tabprev<CR>

" Wipe out all buffers
nmap <silent> <leader>wa :1,9000bwipeout<cr>

" format the entire file
nmap <leader>fef ggVG=

" Toggle paste mode
nmap <silent> <leader>p :set invpaste<CR>:set paste?<CR>

" spelling
nmap <leader>sn ]s
nmap <leader>sp [s
nmap <leader>s= z=
nmap <leader>sg zG
nmap <leader>sm zW
nmap <leader>se :set spelllang=en<CR>
nmap <leader>sf :set spelllang=fr<CR>
nmap <C-X>s wi<C-X>s

" ,----
" | fugitive
" `----
nmap <leader>gb :Gblame<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gl :Glog<CR>
nmap <leader>gc :Gcommit<CR>

" cd to the directory containing the file in the buffer
nmap <silent> <leader>cd :lcd %:h<CR>
nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

" Turn off that stupid highlight search
nmap <silent> <leader>nl :nohls<CR>

" put the vim directives for my file editing settings in
nmap <silent> <leader>vi ovim:set ts=2 sts=2 sw=2:<CR>vim600:fdm=marker fdl=1 fdc=0:<ESC>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Insert my name and email
nmap <silent> <leader>me aWael Nasreddine <wael.nasreddine@gmail.com><ESC>

" Show all available VIM servers
nmap <silent> <leader>sl :echo serverlist()<CR>

" The following beast is something i didn't write... it will return the
" syntax highlighting group that the current "thing" under the cursor
" belongs to -- very useful for figuring out what to change as far as
" syntax highlighting goes.
nmap <silent> <leader>qq :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" set text wrapping toggles
nmap <silent> <leader>ww :set invwrap<CR>:set wrap?<CR>

" Maps to make handling windows a bit easier
"noremap <silent> ,h :wincmd h<CR>
"noremap <silent> ,j :wincmd j<CR>
"noremap <silent> ,k :wincmd k<CR>
"noremap <silent> ,l :wincmd l<CR>
"noremap <silent> ,sb :wincmd p<CR>
noremap <silent> <C-F9> :vertical resize -10<CR>
noremap <silent> <C-F10> :resize +10<CR>
noremap <silent> <C-F11> :resize -10<CR>
noremap <silent> <C-F12> :vertical resize +10<CR>
noremap <silent> <leader>s8 :vertical resize 83<CR>
noremap <silent> <leader>cj :wincmd j<CR>:close<CR>
noremap <silent> <leader>ck :wincmd k<CR>:close<CR>
noremap <silent> <leader>ch :wincmd h<CR>:close<CR>
noremap <silent> <leader>cl :wincmd l<CR>:close<CR>
noremap <silent> <leader>cc :close<CR>
noremap <silent> <leader>cw :cclose<CR>
noremap <silent> <leader>ml <C-W>L
noremap <silent> <leader>mk <C-W>K
noremap <silent> <leader>mh <C-W>H
noremap <silent> <leader>mj <C-W>J
noremap <silent> <C-7> <C-W>>
noremap <silent> <C-8> <C-W>+
noremap <silent> <C-9> <C-W>+
noremap <silent> <C-0> <C-W>>

" Make horizontal scrolling easier
nmap <silent> <C-o> 10zl
nmap <silent> <C-i> 10zh

" Swap two words
nmap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Underline the current line with '='
nmap <silent> <leader>ul :t.\|s/./=/g\|:nohls<cr>

" Use CTRL-E to replace the original ',' mapping
nnoremap <C-E> ,

if !has("gui_macvim")
  " Control-T for ControlT
  map <C-t> :CommandT<CR>
  imap <C-t> <Esc>:CommandT<CR>
  map <M-t> :CommandTBuffer<CR>
  imap <M-t> <ESC>:CommandTBuffer<CR>

  " Control-Shift-F for Ack
  map <C-F> :Ack<space>

  " Control-e for ConqueTerm
  map <C-e> :call StartTerm()<CR>

  " leader-/ to toggle comments
  map <leader>/ <plug>NERDCommenterToggle<CR>
  imap <leader>/ <Esc><plug>NERDCommenterToggle<CR>i

  " Alt-][ to increase/decrease indentation
  nmap <A-]> >>
  nmap <A-[> <<
  vmap <A-]> >gv
  vmap <A-[> <gv

  " Map Control-# to switch tabs
  map  <C-0> 0gt
  imap <C-0> <Esc>0gt
  map  <C-1> 1gt
  imap <C-1> <Esc>1gt
  map  <C-2> 2gt
  imap <C-2> <Esc>2gt
  map  <C-3> 3gt
  imap <C-3> <Esc>3gt
  map  <C-4> 4gt
  imap <C-4> <Esc>4gt
  map  <C-5> 5gt
  imap <C-5> <Esc>5gt
  map  <C-6> 6gt
  imap <C-6> <Esc>6gt
  map  <C-7> 7gt
  imap <C-7> <Esc>7gt
  map  <C-8> 8gt
  imap <C-8> <Esc>8gt
  map  <C-9> 9gt
  imap <C-9> <Esc>9gt

  " Control-Option-ArrowKey to switch viewports
  map <C-M-Up> <C-w>k
  imap <C-M-Up> <Esc> <C-w>k
  map <C-M-Down> <C-w>j
  imap <C-M-Down> <Esc> <C-w>j
  map <C-M-Right> <C-w>l
  imap <C-M-Right> <Esc> <C-w>l
  map <C-M-Left> <C-w>h
  imap <C-M-Left> <C-w>h

  " Adjust viewports to the same size
  map <Leader>= <C-w>=
  imap <Leader>= <Esc> <C-w>=
endif

" ,----
" | Gundo
" `----
nnoremap <F5> :GundoToggle<CR>

" ,----
" | Modifying defaults options
" `----
nmap <leader>elc :set listchars+=eol:$<CR>
nmap <leader>rlc :set listchars-=eol:$<CR>


" ,----
" | Par
" `----
if executable("par")
  nnoremap <silent> <leader>fp vip:!par -w<c-r>=&tw<cr><cr>
  xnoremap <silent> <leader>fp :!par -w<c-r>=&tw<cr><cr>
endif


" ,----
" | ZoomWin
" ,---
map <Leader>zo :ZoomWin<CR>  " Map <leader>zo to zoom

""
"" Auto Commands
""

" Ruby
if has("autocmd")
  augroup ruby
    au!
    au FileType ruby call MyRubyAddons()
  augroup end
endif

""
"" Abbreviations
""

" footnotes
ab ~0 [0]<esc>m`:/^--\s*/-2/<CR>o<CR>Footnotes:<CR>----------<CR>[0]
ab ~1 [1]<esc>m`:/^Footnotes\:/+2/<CR>o[1]
ab ~2 [2]<esc>m`:/^Footnotes\:/+3/<CR>o[2]
ab ~3 [3]<esc>m`:/^Footnotes\:/+4/<CR>o[3]
ab ~4 [4]<esc>m`:/^Footnotes\:/+5/<CR>o[4]
ab ~5 [5]<esc>m`:/^Footnotes\:/+6/<CR>o[5]
ab ~6 [6]<esc>m`:/^Footnotes\:/+7/<CR>o[6]
ab ~7 [7]<esc>m`:/^Footnotes\:/+8/<CR>o[7]
ab ~8 [8]<esc>m`:/^Footnotes\:/+9/<CR>o[8]
ab ~9 [9]<esc>m`:/^Footnotes\:/+10/<CR>o[9]

""
"" Status line
""

" Set the status line the way i like it
set stl=%f\ %m\ %r%{fugitive#statusline()}\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]

""
"" Typos
""

"" simple corrections
iab alos        also
iab aslo        also
iab bianry      binary
iab bianries    binaries
iab charcter    character
iab charcters   characters
iab exmaple     example
iab exmaples    examples
iab shoudl      should
iab seperate    separate
iab teh         the
iab Srever      Server
iab tpyo        typo

"" greetings

iab rr Regards,<cr>Wael Nasreddine
iab grr Greetings,<cr>Wael Nasreddine
